openapi: 3.1
info:
    title: Barberson API
    description: API endpoints
    version: 1.0.0
servers:
    -   url: 'https://barberson.local/'
        description: Local server
#    -   url: 'https://barberson.local/'
#        description: Test server
#security:
#    - ApiKeyAuth: []
paths:
    /api/v1/comments:
      post:
        description: todo
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  text:
                    type: string
                  rating:
                    type: integer
                  customerId:
                    type: integer
                  providerId:
                    type: integer
        responses:
          200:
            description: Search successful
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      status:
                        type: integer
                        enum: [ 200, 422 ]
                      data:
                        $ref: '#/components/schemas/CandidateForEmail'
          401:
            description: Unauthorised access

    /api/v1/orders:
      post:
        description: todo
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  date:
                    type: string
                    format: date
                  price:
                    type: string
                  status:
                    type: string
                  paymentType:
                    type: string
                  customerId:
                    type: integer
                  providerId:
                    type: integer
                  customerAddress:
                    type: string
        responses:
          200:
            description: Search successful
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      status:
                        type: integer
                        enum: [ 200, 422 ]
                      data:
                        $ref: '#/components/schemas/CandidateForEmail'
          401:
            description: Unauthorised access

#    /cvdb/api/rest/v1/profesia/credit:
#        post:
#            description: Purchased new CV credit for company
#            requestBody:
#                required: true
#                content:
#                    application/json:
#                        schema:
#                            type: object
#                            required: [ orderId,  companyId, channel, validFrom, validUntil, purchasedCredits ]
#                            properties:
#                                orderId:
#                                    type: integer
#                                    example: 123456
#                                companyId:
#                                    type: integer
#                                    example: 123456
#                                channel:
#                                    type: string
#                                validFrom:
#                                    type: string
#                                    format: date
#                                    example: 1999-12-12
#                                validUntil:
#                                    type: string
#                                    format: date
#                                    example: 1999-12-12
#                                purchasedCredits:
#                                    type: integer
#                                    example: 123456
#            responses:
#                201:
#                    description: Credit was successfully stored
#                400:
#                    description: Bad request
#    /cvdb/api/rest/v1/profesia/credit/{orderId}:
#        parameters:
#            - $ref: '#/components/parameters/OrderIdInPath'
#        delete:
#            description: Delete order
#            responses:
#                200:
#                    description: Credit order was deleted
#                422:
#                    description: Cannot delete order
#        put:
#            description: Change purchased CV credit for company
#            requestBody:
#                required: true
#                content:
#                    application/json:
#                        schema:
#                            type: object
#                            required: [ companyId, channel, validFrom, validUntil, purchasedCredits ]
#                            properties:
#                                companyId:
#                                    type: integer
#                                    example: 123456
#                                channel:
#                                    type: string
#                                validFrom:
#                                    type: string
#                                    format: date
#                                    example: 1999-12-12
#                                validUntil:
#                                    type: string
#                                    format: date
#                                    example: 1999-12-12
#                                purchasedCredits:
#                                    type: integer
#                                    example: 123456
#            responses:
#                200:
#                    description: Credit was successfully changed
#                400:
#                    description: Bad request
#    /cvdb/api/rest/v1/profesia/user/{userIdToDelete}/delete:
#        post:
#            description: Delete user data
#            parameters:
#                - $ref: '#/components/parameters/UserIdInPath'
#            requestBody:
#                description: User which called this action
#                required: true
#                content:
#                    application/json:
#                        schema:
#                            type: object
#                            required: [ masterUserId ]
#                            properties:
#                                masterUserId:
#                                    type: integer
#            responses:
#                200:
#                    description: User deleted
#                400:
#                    description: Bad request
#                422:
#                    description: Unprocessed entity
#                5XX:
#                    $ref: '#/components/responses/UnexpectedErrorResponse'
#    /cvdb/api/rest/v1/profesia/candidate/{candidateId}/delete:
#        post:
#            description: Delete candidate CV after merging in Profesia admin
#            parameters:
#                - $ref: '#/components/parameters/CandidateIdInPath'
#            responses:
#                200:
#                    description: User CV deleted
#                422:
#                    description: Unprocessed entity
#                5XX:
#                    $ref: '#/components/responses/UnexpectedErrorResponse'
#    /cvdb/api/rest/v1/profesia/company/{companyIdToDelete}/delete:
#        post:
#            description: Merge company data into master company
#            requestBody:
#                required: true
#                content:
#                    application/json:
#                        schema:
#                            type: object
#                            required: [ masterCompanyId ]
#                            properties:
#                                masterCompanyId:
#                                    type: integer
#            responses:
#                200:
#                    description: Company merged
#                400:
#                    description: Bad request
#                422:
#                    description: Unprocessed entity
#                5XX:
#                    $ref: '#/components/responses/UnexpectedErrorResponse'
#
#    /cvdb/api/rest/v1/profesia/company/{companyId}:
#        delete:
#            description: Delete company data
#            responses:
#                200:
#                    description: Company deleted

components:
    securitySchemes:
        ApiKeyAuth:
            type: apiKey
            in: header
            name: X-Api-Token

    schemas:
        CandidateForEmail:
            type: object
            required: [ totalCandidates, candidates ]
            properties:
                totalCandidates:
                    type: integer
                candidates:
                    type: array
                    items:
                        type: object
                        required: [ id, firstName, region, career ]
                        properties:
                            id:
                                type: integer
                            firstName:
                                type: string
                            region:
                                type: string
                            age:
                                type: integer
                                nullable: true
                            career:
                                type: array
                                items:
                                    type: object
                                    required: [ positionName, yearFrom ]
                                    properties:
                                        positionName:
                                            type: string
                                        yearFrom:
                                            type: integer
                                        yearTo:
                                            type: integer
                                            nullable: true
        OfferSearchCriteria:
            type: object
            required: [ cin, locale, userId, channelId ]
            properties:
                cin:
                    type: string
                    nullable: true
                locale:
                    type: string
                userId:
                    type: integer
                channelId:
                    type: integer
                updatedAfter:
                    type: string
                    format: date-time
                    nullable: true
                positions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Position'
                locations:
                    type: array
                    items:
                        $ref: '#/components/schemas/Location'
                employmentTypes:
                    type: array
                    items:
                        type: integer
                educationTypes:
                    type: array
                    items:
                        type: integer
                drivingLicence:
                    $ref: '#/components/schemas/DrivingLicence'
                languageSkills:
                    type: array
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/DefinedSkill'
                            - $ref: '#/components/schemas/Operator'
                otherSkills:
                    type: array
                    items:
                        oneOf:
                            - $ref: '#/components/schemas/DefinedSkill'
                            - $ref: '#/components/schemas/CustomSkill'
        Operator:
            type: object
            required: [operator]
            properties:
                operator:
                    type: string
                    enum: ["OR", "AND"]
        Position:
            type: object
            required: [ positionId, categoryId ]
            properties:
                positionId:
                    type: integer
                categoryId:
                    type: integer
        Location:
            type: object
            required: [ countryId ]
            properties:
                countryId:
                    type: integer
                regionId:
                    type: integer
        DrivingLicence:
            type: array
            items:
                type: string
                enum: [ "A", "B", "C", "D", "E", "T" ]
        DefinedSkill:
            type: object
            required: [ skillId, levelId ]
            properties:
                skillId:
                    type: integer
                levelId:
                    type: integer
        CustomSkill:
            type: object
            required: [ skillId, value ]
            properties:
                value:
                    type: string
                levelId:
                    type: integer
        CreditStatistics:
            type: object
            required: [ purchasedCredits, spentCredits, remainingCredits, orders ]
            properties:
                purchasedCredits:
                    type: integer
                spentCredits:
                    type: integer
                remainingCredits:
                    type: integer
                orders:
                    type: array
                    items:
                        type: object
                        required: [ orderId, purchasedCredits, spentCredits, remainingCredits, validFrom, validUntil ]
                        properties:
                            orderId:
                                type: integer
                            purchasedCredits:
                                type: integer
                            spentCredits:
                                type: integer
                            remainingCredits:
                                type: integer
                            validFrom:
                                type: string
                                example: 1999-12-12 12:12:12
                            validUntil:
                                type: string
                                example: 1999-12-12 12:12:12
        Error:
            required:
                - statusCode
                - name
                - description
            properties:
                statusCode:
                    type: integer
                name:
                    type: string
                description:
                    type: string
                    nullable: true
                payload:
                    type: object
                    nullable: true
                    additionalProperties: true
            additionalProperties: true

    responses:
        UnexpectedErrorResponse:
            description: Unexpected error
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
    parameters:
        CompanyIdInPath:
            name: companyId
            in: path
            description: Company ID
            required: true
            schema:
                type: integer
        OrderIdInPath:
            name: orderId
            in: path
            description: Order ID
            required: true
            schema:
                type: integer
        UserIdInPath:
            name: userIdToDelete
            in: path
            description: Profesia user id
            required: true
            schema:
                type: integer
                example: 123456
        CandidateIdInPath:
            name: candidateId
            in: path
            description: Profesia user id
            required: true
            schema:
                type: integer
                example: 123456
